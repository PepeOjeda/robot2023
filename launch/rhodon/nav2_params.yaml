/*:
  ros__parameters:
    use_sim_time: True
    
$(var namespace):
  #-------------------------------------------------
  # (Map Server/Saver)
  #-------------------------------------------------
  map_server:
    ros__parameters:
      yaml_filename: "map_name.yaml"
      topic_name: "/map"
      frame_id: "map"

  map_saver:
    ros__parameters:
      save_map_timeout: 5.0
      free_thresh_default: 0.25
      occupied_thresh_default: 0.65
      map_subscribe_transient_local: True

  #-------------------------------------------------
  # (localizator) AMCL
  #-------------------------------------------------
  amcl:
    ros__parameters:
      alpha1: 0.1
      alpha2: 0.1
      alpha3: 0.1
      alpha4: 0.1
      alpha5: 0.2
      base_frame_id: "$(var namespace)_base_link"
      beam_skip_distance: 0.5
      beam_skip_error_threshold: 0.9
      beam_skip_threshold: 0.3
      do_beamskip: false
      global_frame_id: "map"
      lambda_short: 0.1
      laser_likelihood_max_dist: 2.0
      laser_max_range: 100.0
      laser_min_range: -1.0
      laser_model_type: "likelihood_field"
      max_beams: 60
      max_particles: 2000
      min_particles: 500
      odom_frame_id: "$(var namespace)_odom"
      pf_err: 0.05
      pf_z: 0.99
      recovery_alpha_fast: 0.0
      recovery_alpha_slow: 0.0
      resample_interval: 1
      robot_model_type: "nav2_amcl::DifferentialMotionModel" # For Humble and later use: "nav2_amcl::DifferentialMotionModel", else use "differential"
      save_pose_rate: 0.5
      sigma_hit: 0.2
      tf_broadcast: true
      transform_tolerance: 1.0
      update_min_a: 0.2
      update_min_d: 0.25
      z_hit: 0.5
      z_max: 0.05
      z_rand: 0.5
      z_short: 0.05
      scan_topic: "scan_back"   #use hokuyo back for localization
      map_topic: "map"
      set_initial_pose: true
      always_reset_initial_pose: false
      first_map_only_: false
      initial_pose:
        x: 0.0
        y: 0.0
        z: 0.0
        yaw: 1.57079

  #-------------------------------------------------
  # (BT) MAIN Behaviour Tree
  # Selects and runs the behaviour-tree for navigating
  # Each node will call a server (planner, smoother, controller or behaviour)
  #-------------------------------------------------
  bt_navigator:
    ros__parameters:
      global_frame: map
      robot_base_frame: $(var namespace)_base_link
      odom_topic: odom
      bt_loop_duration: 10
      default_server_timeout: 20
      # Examples in /opt/ros/humble/share/nav2_bt_navigator/behavior_trees
      #default_nav_to_pose_bt_xml: /home/robotics/tfg_ros_simulation_ws/src/missions_pkg/behavior_trees/follow_point.xml
      #default_nav_through_poses_bt_xml: /home/robotics/tfg_ros_simulation_ws/src/missions_pkg/behavior_trees/follow_point.xml
      navigators: ["navigate_to_pose", "navigate_through_poses"]
      navigate_to_pose:
        plugin: "nav2_bt_navigator/NavigateToPoseNavigator"
      navigate_through_poses:
        plugin: "nav2_bt_navigator/NavigateThroughPosesNavigator"
      goal_blackboard_id: goal
      goals_blackboard_id: goals
      path_blackboard_id: path

      # list of available plugins to use in the navigator
      plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node


  #-------------------------------------------------
  # (Planner) 
  # Commonly know as "global planner" in ROS1
  # In charge of computing a path to reach a goal
  # Based on costmaps
  # for differentcial robots we use NavFN
  #-------------------------------------------------
  planner_server:
    ros__parameters:
      expected_planner_frequency: 4.0
      planner_plugins: ["GridBased"]
      GridBased:
        plugin: "nav2_navfn_planner/NavfnPlanner"
        tolerance: 0.5
        use_astar: false
        allow_unknown: true


  #-------------------------------------------------
  # (Controller) 
  # Also know as "local planners" in ROS1
  # Compute a local path to follow the global path from the planner
  # also based on costmaps
  # we rely on DWB
  #-------------------------------------------------
  controller_server:
    ros__parameters:
      controller_frequency: 20.0
      min_x_velocity_threshold: 0.00
      min_y_velocity_threshold: 0.0
      min_theta_velocity_threshold: 0.00
      failure_tolerance: 0.3
      progress_checker_plugin: "progress_checker"
      goal_checker_plugins: ["goal_checker"]
      controller_plugins: ["FollowPath"]

      # Progress checker parameters
      progress_checker:
        plugin: "nav2_controller::SimpleProgressChecker"
        required_movement_radius: 0.5
        movement_time_allowance: 10.0

      # Goal checker parameters
      goal_checker:
        plugin: "nav2_controller::SimpleGoalChecker"
        xy_goal_tolerance: 0.25
        yaw_goal_tolerance: 0.25
        stateful: True

      # DWB parameters
      FollowPath:
        plugin: "dwb_core::DWBLocalPlanner"
        debug_trajectory_details: True
        min_vel_x: 0.00
        min_vel_y: 0.00
        min_speed_theta: 0.0
        max_vel_x: 0.3
        max_vel_y: 0.0
        max_vel_theta: 0.6

        min_speed_xy: 0.00
        max_speed_xy: 0.3

        acc_lim_x: 1.5
        acc_lim_y: 0.0
        acc_lim_theta: 1.5
        decel_lim_x: -1.5
        decel_lim_y: 0.0
        decel_lim_theta: -1.5
        vx_samples: 20
        vy_samples: 5
        vtheta_samples: 20
        sim_time: 1.7
        linear_granularity: 0.05
        angular_granularity: 0.025
        transform_tolerance: 0.2
        xy_goal_tolerance: 0.25
        trans_stopped_velocity: 0.25
        short_circuit_trajectory_evaluation: True
        stateful: True
        critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
        BaseObstacle.scale: 0.02
        PathAlign.scale: 32.0
        PathAlign.forward_point_distance: 0.1
        GoalAlign.scale: 24.0
        GoalAlign.forward_point_distance: 0.1
        PathDist.scale: 32.0
        GoalDist.scale: 24.0
        RotateToGoal.scale: 32.0
        RotateToGoal.slowing_factor: 5.0
        RotateToGoal.lookahead_time: -1.0

  #-------------------------------------------------
  # (Costmap) Global
  #-------------------------------------------------
  global_costmap:
    global_costmap:
      ros__parameters:
        update_frequency: 1.0
        publish_frequency: 1.0
        global_frame: map
        robot_base_frame: $(var namespace)_base_link
        robot_radius: 0.3
        resolution: 0.05
        track_unknown_space: true
        plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
        obstacle_layer:
          plugin: "nav2_costmap_2d::ObstacleLayer"
          enabled: True
          observation_sources: laserScan_front laserScan_back
          laserScan_front:
            topic: scan_front
            max_obstacle_height: 2.0
            clearing: True
            marking: True
            data_type: "LaserScan"
            raytrace_max_range: 3.0
            raytrace_min_range: 0.0
            obstacle_max_range: 2.5
            obstacle_min_range: 0.0
          laserScan_back:
            topic: scan_back
            max_obstacle_height: 2.0
            clearing: True
            marking: True
            data_type: "LaserScan"
            raytrace_max_range: 3.0
            raytrace_min_range: 0.0
            obstacle_max_range: 2.5
            obstacle_min_range: 0.0
        static_layer:
          plugin: "nav2_costmap_2d::StaticLayer"
          map_subscribe_transient_local: True
        inflation_layer:
          plugin: "nav2_costmap_2d::InflationLayer"
          cost_scaling_factor: 3.0
          inflation_radius: 0.55
        always_send_full_costmap: True
  #-------------------------------------------------
  # (Costmap) Local
  #-------------------------------------------------
  local_costmap:
    local_costmap:
      ros__parameters:
        update_frequency: 5.0
        publish_frequency: 2.0
        global_frame: $(var namespace)_odom
        robot_base_frame: $(var namespace)_base_link
        rolling_window: true
        width: 3
        height: 3
        resolution: 0.05
        robot_radius: 0.3 #m rhodon
        plugins: ["voxel_layer", "inflation_layer"]
        inflation_layer:
          plugin: "nav2_costmap_2d::InflationLayer"
          cost_scaling_factor: 3.0
          inflation_radius: 0.55
        #voxel layers are 3D, so theoretically for RGB-D cameras and 3D rangefinders
        voxel_layer:
          plugin: "nav2_costmap_2d::VoxelLayer"
          enabled: True
          publish_voxel_map: True
          origin_z: 0.0
          z_resolution: 0.05
          z_voxels: 16
          max_obstacle_height: 2.0
          mark_threshold: 0
          observation_sources: scan_front scan_back
          scan_front:
            topic: scan_front
            max_obstacle_height: 2.0
            clearing: True
            marking: True
            data_type: "LaserScan"
            raytrace_max_range: 3.0
            raytrace_min_range: 0.0
            obstacle_max_range: 2.5
            obstacle_min_range: 0.0
          scan_back:
            topic: scan_back
            max_obstacle_height: 2.0
            clearing: True
            marking: True
            data_type: "LaserScan"
            raytrace_max_range: 3.0
            raytrace_min_range: 0.0
            obstacle_max_range: 2.5
            obstacle_min_range: 0.0
        static_layer:
          map_subscribe_transient_local: True
        always_send_full_costmap: True




  #-------------------------------------------------
  # (Recovery Behaviours)
  # fault tolerance of any other server action
  # 
  #-------------------------------------------------
  behavior_server:
    ros__parameters:
      costmap_topic: local_costmap/costmap_raw
      footprint_topic: local_costmap/published_footprint
      cycle_frequency: 10.0
      recovery_plugins: ["spin", "backup", "wait"]
      spin:
        plugin: "nav2_behaviors/Spin"
      backup:
        plugin: "nav2_behaviors/BackUp"
      wait:
        plugin: "nav2_behaviors/Wait"
      global_frame: $(var namespace)_odom
      robot_base_frame: $(var namespace)_base_link
      transform_timeout: 0.1
      simulate_ahead_time: 2.0
      max_rotational_vel: 1.0
      min_rotational_vel: 0.4
      rotational_acc_lim: 3.2


  #-------------------------------------------------
  # (waypoint_follower)
  # Simple nav2 application able to navigate to a point
  # More elaborate modes can be achieved with the nav2_behavior_tree to
  # account for battery lvl, etc
  #-------------------------------------------------
  waypoint_follower:
    ros__parameters:
      loop_rate: 20
      stop_on_failure: false
      waypoint_task_executor_plugin: "wait_at_waypoint"   
      wait_at_waypoint:
        plugin: "nav2_waypoint_follower::WaitAtWaypoint"
        enabled: True
        waypoint_pause_duration: 200  #ms



